-- Migration: Add webhook events tracking table
-- Description: Track all incoming payment webhook events for audit trail and idempotency
-- Provider: Stripe and PayPal webhooks

-- Create webhook_events table
CREATE TABLE IF NOT EXISTS webhook_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  provider TEXT NOT NULL CHECK (provider IN ('stripe', 'paypal')),
  event_id TEXT NOT NULL,
  event_type TEXT NOT NULL,
  processed BOOLEAN NOT NULL DEFAULT FALSE,
  processing_started_at TIMESTAMPTZ,
  processed_at TIMESTAMPTZ,
  processing_error TEXT,
  idempotency_key TEXT,
  reservation_id BIGINT REFERENCES reservations(id) ON DELETE SET NULL,
  payload JSONB NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add indexes for performance
CREATE INDEX idx_webhook_events_provider_event_id ON webhook_events(provider, event_id);
CREATE INDEX idx_webhook_events_idempotency_key ON webhook_events(idempotency_key);
CREATE INDEX idx_webhook_events_reservation_id ON webhook_events(reservation_id);
CREATE INDEX idx_webhook_events_processed ON webhook_events(processed);
CREATE INDEX idx_webhook_events_created_at ON webhook_events(created_at);

-- Add unique constraints to prevent duplicates
-- Each provider/event_id combination should be unique
ALTER TABLE webhook_events ADD CONSTRAINT unique_webhook_event
  UNIQUE (provider, event_id);

-- Each idempotency key should be unique across all providers
ALTER TABLE webhook_events ADD CONSTRAINT unique_idempotency_key
  UNIQUE (idempotency_key) WHERE idempotency_key IS NOT NULL;

-- Add RLS (Row Level Security) - only system can access webhook events
ALTER TABLE webhook_events ENABLE ROW LEVEL SECURITY;

-- System policy - allow all operations for service role
CREATE POLICY "System full access to webhook_events" ON webhook_events
  FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_webhook_events_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add trigger to automatically update updated_at
CREATE TRIGGER webhook_events_updated_at
  BEFORE UPDATE ON webhook_events
  FOR EACH ROW
  EXECUTE PROCEDURE update_webhook_events_updated_at();

-- Add comments for documentation
COMMENT ON TABLE webhook_events IS 'Tracks all incoming payment webhook events for audit trail and idempotency management';
COMMENT ON COLUMN webhook_events.provider IS 'Payment provider: stripe or paypal';
COMMENT ON COLUMN webhook_events.event_id IS 'Unique event identifier from the provider';
COMMENT ON COLUMN webhook_events.event_type IS 'Type of event (e.g., payment_intent.succeeded, checkout.session.completed)';
COMMENT ON COLUMN webhook_events.processed IS 'Whether the webhook has been successfully processed';
COMMENT ON COLUMN webhook_events.processing_started_at IS 'When processing began for this event';
COMMENT ON COLUMN webhook_events.processed_at IS 'When the webhook was successfully processed';
COMMENT ON COLUMN webhook_events.processing_error IS 'Error message if processing failed';
COMMENT ON COLUMN webhook_events.idempotency_key IS 'Key to prevent duplicate processing';
COMMENT ON COLUMN webhook_events.reservation_id IS 'Related reservation if applicable';
COMMENT ON COLUMN webhook_events.payload IS 'Full webhook payload from provider';